{"ast":null,"code":"// // import React, { useState, useEffect } from 'react';\n// // import {\n// //   Container,\n// //   Paper,\n// //   Typography,\n// //   Box,\n// //   Tabs,\n// //   Tab,\n// //   Table,\n// //   TableBody,\n// //   TableCell,\n// //   TableHead,\n// //   TableRow,\n// //   Button,\n// //   Dialog,\n// //   DialogTitle,\n// //   DialogContent,\n// //   DialogActions,\n// //   TextField,\n// //   IconButton,\n// //   Tooltip\n// // } from '@mui/material';\n// // import {\n// //   Visibility as VisibilityIcon,\n// //   Delete as DeleteIcon,\n// //   Check as CheckIcon\n// // } from '@mui/icons-material';\n// // import api from '../utils/axios';\n\n// // const AdminDashboard = () => {\n// //   const [tabValue, setTabValue] = useState(0);\n// //   const [pendingRequests, setPendingRequests] = useState([]);\n// //   const [verifiedUsers, setVerifiedUsers] = useState([]);\n// //   const [selectedUser, setSelectedUser] = useState(null);\n// //   const [credentialsDialog, setCredentialsDialog] = useState(false);\n// //   const [credentials, setCredentials] = useState({\n// //     username: '',\n// //     password: ''\n// //   });\n\n// //   useEffect(() => {\n// //     fetchData();\n// //   }, []);\n\n// //   const fetchData = async () => {\n// //     try {\n// //       const [pendingRes, verifiedRes] = await Promise.all([\n// //         api.get('/api/admin/pending-requests'),\n// //         api.get('/api/admin/verified-jobholders')\n// //       ]);\n// //       setPendingRequests(pendingRes.data);\n// //       setVerifiedUsers(verifiedRes.data);\n// //     } catch (error) {\n// //       console.error('Error fetching data:', error);\n// //     }\n// //   };\n\n// //   const handleVerify = async () => {\n// //     try {\n// //       await api.post(`/api/admin/verify-jobholder/${selectedUser._id}`, credentials);\n// //       setCredentialsDialog(false);\n// //       fetchData();\n// //     } catch (error) {\n// //       console.error('Error verifying user:', error);\n// //     }\n// //   };\n\n// //   const handleRemoveVerification = async (userId) => {\n// //     if (window.confirm('Are you sure you want to remove this verification?')) {\n// //       try {\n// //         await api.post(`/api/admin/remove-verification/${userId}`);\n// //         fetchData();\n// //       } catch (error) {\n// //         console.error('Error removing verification:', error);\n// //       }\n// //     }\n// //   };\n\n// //   return (\n// //     <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n// //       <Paper elevation={3} sx={{ p: 3 }}>\n// //         <Typography variant=\"h4\" gutterBottom>\n// //           Admin Dashboard\n// //         </Typography>\n\n// //         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n// //           <Tab label=\"Pending Requests\" />\n// //           <Tab label=\"Verified Job Holders\" />\n// //         </Tabs>\n\n// //         {/* Pending Requests Tab */}\n// //         <TabPanel value={tabValue} index={0}>\n// //           <Table>\n// //             <TableHead>\n// //               <TableRow>\n// //                 <TableCell>Email</TableCell>\n// //                 <TableCell>Company</TableCell>\n// //                 <TableCell>Role</TableCell>\n// //                 <TableCell>Actions</TableCell>\n// //               </TableRow>\n// //             </TableHead>\n// //             <TableBody>\n// //               {pendingRequests.map((request) => (\n// //                 <TableRow key={request._id}>\n// //                   <TableCell>{request.email}</TableCell>\n// //                   <TableCell>{request.jobDetails?.companyName}</TableCell>\n// //                   <TableCell>{request.jobDetails?.role}</TableCell>\n// //                   <TableCell>\n// //                     <Tooltip title=\"View Offer Letter\">\n// //                       <IconButton onClick={() => window.open(`/uploads/offerLetters/${request.jobDetails.offerLetter}`)}>\n// //                         <VisibilityIcon />\n// //                       </IconButton>\n// //                     </Tooltip>\n// //                     <Button\n// //                       variant=\"contained\"\n// //                       color=\"primary\"\n// //                       startIcon={<CheckIcon />}\n// //                       onClick={() => {\n// //                         setSelectedUser(request);\n// //                         setCredentialsDialog(true);\n// //                       }}\n// //                     >\n// //                       Verify\n// //                     </Button>\n// //                   </TableCell>\n// //                 </TableRow>\n// //               ))}\n// //             </TableBody>\n// //           </Table>\n// //         </TabPanel>\n\n// //         {/* Verified Users Tab */}\n// //         <TabPanel value={tabValue} index={1}>\n// //           <Table>\n// //             <TableHead>\n// //               <TableRow>\n// //                 <TableCell>Username</TableCell>\n// //                 <TableCell>Email</TableCell>\n// //                 <TableCell>Company</TableCell>\n// //                 <TableCell>Actions</TableCell>\n// //               </TableRow>\n// //             </TableHead>\n// //             <TableBody>\n// //               {verifiedUsers.map((user) => (\n// //                 <TableRow key={user._id}>\n// //                   <TableCell>{user.username}</TableCell>\n// //                   <TableCell>{user.email}</TableCell>\n// //                   <TableCell>{user.jobDetails?.companyName}</TableCell>\n// //                   <TableCell>\n// //                     <Button\n// //                       variant=\"outlined\"\n// //                       color=\"error\"\n// //                       startIcon={<DeleteIcon />}\n// //                       onClick={() => handleRemoveVerification(user._id)}\n// //                     >\n// //                       Remove Verification\n// //                     </Button>\n// //                   </TableCell>\n// //                 </TableRow>\n// //               ))}\n// //             </TableBody>\n// //           </Table>\n// //         </TabPanel>\n\n// //         {/* Credentials Dialog */}\n// //         <Dialog open={credentialsDialog} onClose={() => setCredentialsDialog(false)}>\n// //           <DialogTitle>Set Job Holder Credentials</DialogTitle>\n// //           <DialogContent>\n// //             <TextField\n// //               fullWidth\n// //               label=\"Username\"\n// //               value={credentials.username}\n// //               onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\n// //               margin=\"normal\"\n// //             />\n// //             <TextField\n// //               fullWidth\n// //               label=\"Password\"\n// //               type=\"password\"\n// //               value={credentials.password}\n// //               onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n// //               margin=\"normal\"\n// //             />\n// //           </DialogContent>\n// //           <DialogActions>\n// //             <Button onClick={() => setCredentialsDialog(false)}>Cancel</Button>\n// //             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">\n// //               Verify & Send Credentials\n// //             </Button>\n// //           </DialogActions>\n// //         </Dialog>\n// //       </Paper>\n// //     </Container>\n// //   );\n// // };\n\n// // const TabPanel = ({ children, value, index }) => (\n// //   <Box hidden={value !== index} sx={{ pt: 3 }}>\n// //     {value === index && children}\n// //   </Box>\n// // );\n\n// // export default AdminDashboard; \n// import React, { useState, useEffect } from 'react';\n// import {\n//   Container, Paper, Typography, Tabs, Tab, Table, TableBody, TableCell,\n//   TableHead, TableRow, Button, Dialog, DialogTitle, DialogContent,\n//   DialogActions, TextField, IconButton\n// } from '@mui/material';\n// import { Visibility as VisibilityIcon, Check as CheckIcon, Delete as DeleteIcon } from '@mui/icons-material';\n// import axios from '../utils/axios';\n\n// const AdminDashboard = () => {\n//   const [tabValue, setTabValue] = useState(0);\n//   const [pendingRequests, setPendingRequests] = useState([]);\n//   const [verifiedUsers, setVerifiedUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [openDialog, setOpenDialog] = useState(false);\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const [pending, verified] = await Promise.all([\n//         axios.get('/api/admin/pending-requests'),\n//         axios.get('/api/admin/verified-jobholders')\n//       ]);\n//       setPendingRequests(pending.data);\n//       setVerifiedUsers(verified.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleVerify = async () => {\n//     try {\n//       await axios.post(`/api/admin/verify-jobholder/${selectedUser._id}`);\n//       setOpenDialog(false);\n//       fetchData();\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <Container maxWidth=\"md\" sx={{ py: 4 }}>\n//       <Paper sx={{ p: 3 }}>\n//         <Typography variant=\"h4\" gutterBottom>Admin Dashboard</Typography>\n//         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n//           <Tab label=\"Pending Requests\" />\n//           <Tab label=\"Verified Job Holders\" />\n//         </Tabs>\n\n//         {tabValue === 0 && (\n//           <Table>\n//             <TableHead>\n//               <TableRow><TableCell>Email</TableCell><TableCell>Actions</TableCell></TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {pendingRequests.map((user) => (\n//                 <TableRow key={user._id}>\n//                   <TableCell>{user.email}</TableCell>\n//                   <TableCell>\n//                     <Button onClick={() => { setSelectedUser(user); setOpenDialog(true); }} startIcon={<CheckIcon />}>Verify</Button>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//         )}\n\n//         <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\n//           <DialogTitle>Verify Jobholder</DialogTitle>\n//           <DialogActions>\n//             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">Verify</Button>\n//           </DialogActions>\n//         </Dialog>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default AdminDashboard;","map":{"version":3,"names":[],"sources":["C:/Users/mnikh/OneDrive/Desktop/jobopputunities/client/src/pages/AdminDashboard.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import {\r\n// //   Container,\r\n// //   Paper,\r\n// //   Typography,\r\n// //   Box,\r\n// //   Tabs,\r\n// //   Tab,\r\n// //   Table,\r\n// //   TableBody,\r\n// //   TableCell,\r\n// //   TableHead,\r\n// //   TableRow,\r\n// //   Button,\r\n// //   Dialog,\r\n// //   DialogTitle,\r\n// //   DialogContent,\r\n// //   DialogActions,\r\n// //   TextField,\r\n// //   IconButton,\r\n// //   Tooltip\r\n// // } from '@mui/material';\r\n// // import {\r\n// //   Visibility as VisibilityIcon,\r\n// //   Delete as DeleteIcon,\r\n// //   Check as CheckIcon\r\n// // } from '@mui/icons-material';\r\n// // import api from '../utils/axios';\r\n\r\n// // const AdminDashboard = () => {\r\n// //   const [tabValue, setTabValue] = useState(0);\r\n// //   const [pendingRequests, setPendingRequests] = useState([]);\r\n// //   const [verifiedUsers, setVerifiedUsers] = useState([]);\r\n// //   const [selectedUser, setSelectedUser] = useState(null);\r\n// //   const [credentialsDialog, setCredentialsDialog] = useState(false);\r\n// //   const [credentials, setCredentials] = useState({\r\n// //     username: '',\r\n// //     password: ''\r\n// //   });\r\n\r\n// //   useEffect(() => {\r\n// //     fetchData();\r\n// //   }, []);\r\n\r\n// //   const fetchData = async () => {\r\n// //     try {\r\n// //       const [pendingRes, verifiedRes] = await Promise.all([\r\n// //         api.get('/api/admin/pending-requests'),\r\n// //         api.get('/api/admin/verified-jobholders')\r\n// //       ]);\r\n// //       setPendingRequests(pendingRes.data);\r\n// //       setVerifiedUsers(verifiedRes.data);\r\n// //     } catch (error) {\r\n// //       console.error('Error fetching data:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleVerify = async () => {\r\n// //     try {\r\n// //       await api.post(`/api/admin/verify-jobholder/${selectedUser._id}`, credentials);\r\n// //       setCredentialsDialog(false);\r\n// //       fetchData();\r\n// //     } catch (error) {\r\n// //       console.error('Error verifying user:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleRemoveVerification = async (userId) => {\r\n// //     if (window.confirm('Are you sure you want to remove this verification?')) {\r\n// //       try {\r\n// //         await api.post(`/api/admin/remove-verification/${userId}`);\r\n// //         fetchData();\r\n// //       } catch (error) {\r\n// //         console.error('Error removing verification:', error);\r\n// //       }\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n// //       <Paper elevation={3} sx={{ p: 3 }}>\r\n// //         <Typography variant=\"h4\" gutterBottom>\r\n// //           Admin Dashboard\r\n// //         </Typography>\r\n\r\n// //         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\r\n// //           <Tab label=\"Pending Requests\" />\r\n// //           <Tab label=\"Verified Job Holders\" />\r\n// //         </Tabs>\r\n\r\n// //         {/* Pending Requests Tab */}\r\n// //         <TabPanel value={tabValue} index={0}>\r\n// //           <Table>\r\n// //             <TableHead>\r\n// //               <TableRow>\r\n// //                 <TableCell>Email</TableCell>\r\n// //                 <TableCell>Company</TableCell>\r\n// //                 <TableCell>Role</TableCell>\r\n// //                 <TableCell>Actions</TableCell>\r\n// //               </TableRow>\r\n// //             </TableHead>\r\n// //             <TableBody>\r\n// //               {pendingRequests.map((request) => (\r\n// //                 <TableRow key={request._id}>\r\n// //                   <TableCell>{request.email}</TableCell>\r\n// //                   <TableCell>{request.jobDetails?.companyName}</TableCell>\r\n// //                   <TableCell>{request.jobDetails?.role}</TableCell>\r\n// //                   <TableCell>\r\n// //                     <Tooltip title=\"View Offer Letter\">\r\n// //                       <IconButton onClick={() => window.open(`/uploads/offerLetters/${request.jobDetails.offerLetter}`)}>\r\n// //                         <VisibilityIcon />\r\n// //                       </IconButton>\r\n// //                     </Tooltip>\r\n// //                     <Button\r\n// //                       variant=\"contained\"\r\n// //                       color=\"primary\"\r\n// //                       startIcon={<CheckIcon />}\r\n// //                       onClick={() => {\r\n// //                         setSelectedUser(request);\r\n// //                         setCredentialsDialog(true);\r\n// //                       }}\r\n// //                     >\r\n// //                       Verify\r\n// //                     </Button>\r\n// //                   </TableCell>\r\n// //                 </TableRow>\r\n// //               ))}\r\n// //             </TableBody>\r\n// //           </Table>\r\n// //         </TabPanel>\r\n\r\n// //         {/* Verified Users Tab */}\r\n// //         <TabPanel value={tabValue} index={1}>\r\n// //           <Table>\r\n// //             <TableHead>\r\n// //               <TableRow>\r\n// //                 <TableCell>Username</TableCell>\r\n// //                 <TableCell>Email</TableCell>\r\n// //                 <TableCell>Company</TableCell>\r\n// //                 <TableCell>Actions</TableCell>\r\n// //               </TableRow>\r\n// //             </TableHead>\r\n// //             <TableBody>\r\n// //               {verifiedUsers.map((user) => (\r\n// //                 <TableRow key={user._id}>\r\n// //                   <TableCell>{user.username}</TableCell>\r\n// //                   <TableCell>{user.email}</TableCell>\r\n// //                   <TableCell>{user.jobDetails?.companyName}</TableCell>\r\n// //                   <TableCell>\r\n// //                     <Button\r\n// //                       variant=\"outlined\"\r\n// //                       color=\"error\"\r\n// //                       startIcon={<DeleteIcon />}\r\n// //                       onClick={() => handleRemoveVerification(user._id)}\r\n// //                     >\r\n// //                       Remove Verification\r\n// //                     </Button>\r\n// //                   </TableCell>\r\n// //                 </TableRow>\r\n// //               ))}\r\n// //             </TableBody>\r\n// //           </Table>\r\n// //         </TabPanel>\r\n\r\n// //         {/* Credentials Dialog */}\r\n// //         <Dialog open={credentialsDialog} onClose={() => setCredentialsDialog(false)}>\r\n// //           <DialogTitle>Set Job Holder Credentials</DialogTitle>\r\n// //           <DialogContent>\r\n// //             <TextField\r\n// //               fullWidth\r\n// //               label=\"Username\"\r\n// //               value={credentials.username}\r\n// //               onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\r\n// //               margin=\"normal\"\r\n// //             />\r\n// //             <TextField\r\n// //               fullWidth\r\n// //               label=\"Password\"\r\n// //               type=\"password\"\r\n// //               value={credentials.password}\r\n// //               onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\r\n// //               margin=\"normal\"\r\n// //             />\r\n// //           </DialogContent>\r\n// //           <DialogActions>\r\n// //             <Button onClick={() => setCredentialsDialog(false)}>Cancel</Button>\r\n// //             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">\r\n// //               Verify & Send Credentials\r\n// //             </Button>\r\n// //           </DialogActions>\r\n// //         </Dialog>\r\n// //       </Paper>\r\n// //     </Container>\r\n// //   );\r\n// // };\r\n\r\n// // const TabPanel = ({ children, value, index }) => (\r\n// //   <Box hidden={value !== index} sx={{ pt: 3 }}>\r\n// //     {value === index && children}\r\n// //   </Box>\r\n// // );\r\n\r\n// // export default AdminDashboard; \r\n// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//   Container, Paper, Typography, Tabs, Tab, Table, TableBody, TableCell,\r\n//   TableHead, TableRow, Button, Dialog, DialogTitle, DialogContent,\r\n//   DialogActions, TextField, IconButton\r\n// } from '@mui/material';\r\n// import { Visibility as VisibilityIcon, Check as CheckIcon, Delete as DeleteIcon } from '@mui/icons-material';\r\n// import axios from '../utils/axios';\r\n\r\n// const AdminDashboard = () => {\r\n//   const [tabValue, setTabValue] = useState(0);\r\n//   const [pendingRequests, setPendingRequests] = useState([]);\r\n//   const [verifiedUsers, setVerifiedUsers] = useState([]);\r\n//   const [selectedUser, setSelectedUser] = useState(null);\r\n//   const [openDialog, setOpenDialog] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const [pending, verified] = await Promise.all([\r\n//         axios.get('/api/admin/pending-requests'),\r\n//         axios.get('/api/admin/verified-jobholders')\r\n//       ]);\r\n//       setPendingRequests(pending.data);\r\n//       setVerifiedUsers(verified.data);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleVerify = async () => {\r\n//     try {\r\n//       await axios.post(`/api/admin/verify-jobholder/${selectedUser._id}`);\r\n//       setOpenDialog(false);\r\n//       fetchData();\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container maxWidth=\"md\" sx={{ py: 4 }}>\r\n//       <Paper sx={{ p: 3 }}>\r\n//         <Typography variant=\"h4\" gutterBottom>Admin Dashboard</Typography>\r\n//         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\r\n//           <Tab label=\"Pending Requests\" />\r\n//           <Tab label=\"Verified Job Holders\" />\r\n//         </Tabs>\r\n\r\n//         {tabValue === 0 && (\r\n//           <Table>\r\n//             <TableHead>\r\n//               <TableRow><TableCell>Email</TableCell><TableCell>Actions</TableCell></TableRow>\r\n//             </TableHead>\r\n//             <TableBody>\r\n//               {pendingRequests.map((user) => (\r\n//                 <TableRow key={user._id}>\r\n//                   <TableCell>{user.email}</TableCell>\r\n//                   <TableCell>\r\n//                     <Button onClick={() => { setSelectedUser(user); setOpenDialog(true); }} startIcon={<CheckIcon />}>Verify</Button>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//         )}\r\n\r\n//         <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n//           <DialogTitle>Verify Jobholder</DialogTitle>\r\n//           <DialogActions>\r\n//             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">Verify</Button>\r\n//           </DialogActions>\r\n//         </Dialog>\r\n//       </Paper>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default AdminDashboard;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}