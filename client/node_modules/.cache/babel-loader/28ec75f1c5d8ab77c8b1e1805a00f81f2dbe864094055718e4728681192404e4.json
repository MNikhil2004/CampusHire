{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mnikh\\\\OneDrive\\\\Desktop\\\\jobopputunities\\\\client\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Container,\n//   Paper,\n//   Typography,\n//   Box,\n//   Tabs,\n//   Tab,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n//   Button,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   TextField,\n//   IconButton,\n//   Tooltip\n// } from '@mui/material';\n// import {\n//   Visibility as VisibilityIcon,\n//   Delete as DeleteIcon,\n//   Check as CheckIcon\n// } from '@mui/icons-material';\n// import api from '../utils/axios';\n\n// const AdminDashboard = () => {\n//   const [tabValue, setTabValue] = useState(0);\n//   const [pendingRequests, setPendingRequests] = useState([]);\n//   const [verifiedUsers, setVerifiedUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [credentialsDialog, setCredentialsDialog] = useState(false);\n//   const [credentials, setCredentials] = useState({\n//     username: '',\n//     password: ''\n//   });\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const [pendingRes, verifiedRes] = await Promise.all([\n//         api.get('/api/admin/pending-requests'),\n//         api.get('/api/admin/verified-jobholders')\n//       ]);\n//       setPendingRequests(pendingRes.data);\n//       setVerifiedUsers(verifiedRes.data);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   const handleVerify = async () => {\n//     try {\n//       await api.post(`/api/admin/verify-jobholder/${selectedUser._id}`, credentials);\n//       setCredentialsDialog(false);\n//       fetchData();\n//     } catch (error) {\n//       console.error('Error verifying user:', error);\n//     }\n//   };\n\n//   const handleRemoveVerification = async (userId) => {\n//     if (window.confirm('Are you sure you want to remove this verification?')) {\n//       try {\n//         await api.post(`/api/admin/remove-verification/${userId}`);\n//         fetchData();\n//       } catch (error) {\n//         console.error('Error removing verification:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n//       <Paper elevation={3} sx={{ p: 3 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Admin Dashboard\n//         </Typography>\n\n//         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n//           <Tab label=\"Pending Requests\" />\n//           <Tab label=\"Verified Job Holders\" />\n//         </Tabs>\n\n//         {/* Pending Requests Tab */}\n//         <TabPanel value={tabValue} index={0}>\n//           <Table>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell>Email</TableCell>\n//                 <TableCell>Company</TableCell>\n//                 <TableCell>Role</TableCell>\n//                 <TableCell>Actions</TableCell>\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {pendingRequests.map((request) => (\n//                 <TableRow key={request._id}>\n//                   <TableCell>{request.email}</TableCell>\n//                   <TableCell>{request.jobDetails?.companyName}</TableCell>\n//                   <TableCell>{request.jobDetails?.role}</TableCell>\n//                   <TableCell>\n//                     <Tooltip title=\"View Offer Letter\">\n//                       <IconButton onClick={() => window.open(`/uploads/offerLetters/${request.jobDetails.offerLetter}`)}>\n//                         <VisibilityIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Button\n//                       variant=\"contained\"\n//                       color=\"primary\"\n//                       startIcon={<CheckIcon />}\n//                       onClick={() => {\n//                         setSelectedUser(request);\n//                         setCredentialsDialog(true);\n//                       }}\n//                     >\n//                       Verify\n//                     </Button>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//         </TabPanel>\n\n//         {/* Verified Users Tab */}\n//         <TabPanel value={tabValue} index={1}>\n//           <Table>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell>Username</TableCell>\n//                 <TableCell>Email</TableCell>\n//                 <TableCell>Company</TableCell>\n//                 <TableCell>Actions</TableCell>\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {verifiedUsers.map((user) => (\n//                 <TableRow key={user._id}>\n//                   <TableCell>{user.username}</TableCell>\n//                   <TableCell>{user.email}</TableCell>\n//                   <TableCell>{user.jobDetails?.companyName}</TableCell>\n//                   <TableCell>\n//                     <Button\n//                       variant=\"outlined\"\n//                       color=\"error\"\n//                       startIcon={<DeleteIcon />}\n//                       onClick={() => handleRemoveVerification(user._id)}\n//                     >\n//                       Remove Verification\n//                     </Button>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//         </TabPanel>\n\n//         {/* Credentials Dialog */}\n//         <Dialog open={credentialsDialog} onClose={() => setCredentialsDialog(false)}>\n//           <DialogTitle>Set Job Holder Credentials</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               fullWidth\n//               label=\"Username\"\n//               value={credentials.username}\n//               onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\n//               margin=\"normal\"\n//             />\n//             <TextField\n//               fullWidth\n//               label=\"Password\"\n//               type=\"password\"\n//               value={credentials.password}\n//               onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n//               margin=\"normal\"\n//             />\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={() => setCredentialsDialog(false)}>Cancel</Button>\n//             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">\n//               Verify & Send Credentials\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// const TabPanel = ({ children, value, index }) => (\n//   <Box hidden={value !== index} sx={{ pt: 3 }}>\n//     {value === index && children}\n//   </Box>\n// );\n\n// export default AdminDashboard; \n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  const [user, setUser] = useState({\n    username: '',\n    email: '',\n    password: '',\n    role: 'user',\n    college: ''\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post('/api/admin/create-user', user);\n      alert('User created and credentials sent via email');\n    } catch (error) {\n      alert('Error creating user');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      onChange: e => setUser({\n        ...user,\n        username: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Email\",\n      onChange: e => setUser({\n        ...user,\n        email: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: e => setUser({\n        ...user,\n        password: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setUser({\n        ...user,\n        role: e.target.value\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"user\",\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"jobholder\",\n        children: \"Jobholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"College\",\n      onChange: e => setUser({\n        ...user,\n        college: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Create User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminDashboard, \"vsIyZCFJaQ2VSIeOehPqPA/Uau8=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","AdminDashboard","_s","user","setUser","username","email","password","role","college","handleSubmit","e","preventDefault","post","alert","error","onSubmit","children","type","placeholder","onChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mnikh/OneDrive/Desktop/jobopputunities/client/src/pages/AdminDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//   Container,\r\n//   Paper,\r\n//   Typography,\r\n//   Box,\r\n//   Tabs,\r\n//   Tab,\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableRow,\r\n//   Button,\r\n//   Dialog,\r\n//   DialogTitle,\r\n//   DialogContent,\r\n//   DialogActions,\r\n//   TextField,\r\n//   IconButton,\r\n//   Tooltip\r\n// } from '@mui/material';\r\n// import {\r\n//   Visibility as VisibilityIcon,\r\n//   Delete as DeleteIcon,\r\n//   Check as CheckIcon\r\n// } from '@mui/icons-material';\r\n// import api from '../utils/axios';\r\n\r\n// const AdminDashboard = () => {\r\n//   const [tabValue, setTabValue] = useState(0);\r\n//   const [pendingRequests, setPendingRequests] = useState([]);\r\n//   const [verifiedUsers, setVerifiedUsers] = useState([]);\r\n//   const [selectedUser, setSelectedUser] = useState(null);\r\n//   const [credentialsDialog, setCredentialsDialog] = useState(false);\r\n//   const [credentials, setCredentials] = useState({\r\n//     username: '',\r\n//     password: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const [pendingRes, verifiedRes] = await Promise.all([\r\n//         api.get('/api/admin/pending-requests'),\r\n//         api.get('/api/admin/verified-jobholders')\r\n//       ]);\r\n//       setPendingRequests(pendingRes.data);\r\n//       setVerifiedUsers(verifiedRes.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleVerify = async () => {\r\n//     try {\r\n//       await api.post(`/api/admin/verify-jobholder/${selectedUser._id}`, credentials);\r\n//       setCredentialsDialog(false);\r\n//       fetchData();\r\n//     } catch (error) {\r\n//       console.error('Error verifying user:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveVerification = async (userId) => {\r\n//     if (window.confirm('Are you sure you want to remove this verification?')) {\r\n//       try {\r\n//         await api.post(`/api/admin/remove-verification/${userId}`);\r\n//         fetchData();\r\n//       } catch (error) {\r\n//         console.error('Error removing verification:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n//       <Paper elevation={3} sx={{ p: 3 }}>\r\n//         <Typography variant=\"h4\" gutterBottom>\r\n//           Admin Dashboard\r\n//         </Typography>\r\n\r\n//         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\r\n//           <Tab label=\"Pending Requests\" />\r\n//           <Tab label=\"Verified Job Holders\" />\r\n//         </Tabs>\r\n\r\n//         {/* Pending Requests Tab */}\r\n//         <TabPanel value={tabValue} index={0}>\r\n//           <Table>\r\n//             <TableHead>\r\n//               <TableRow>\r\n//                 <TableCell>Email</TableCell>\r\n//                 <TableCell>Company</TableCell>\r\n//                 <TableCell>Role</TableCell>\r\n//                 <TableCell>Actions</TableCell>\r\n//               </TableRow>\r\n//             </TableHead>\r\n//             <TableBody>\r\n//               {pendingRequests.map((request) => (\r\n//                 <TableRow key={request._id}>\r\n//                   <TableCell>{request.email}</TableCell>\r\n//                   <TableCell>{request.jobDetails?.companyName}</TableCell>\r\n//                   <TableCell>{request.jobDetails?.role}</TableCell>\r\n//                   <TableCell>\r\n//                     <Tooltip title=\"View Offer Letter\">\r\n//                       <IconButton onClick={() => window.open(`/uploads/offerLetters/${request.jobDetails.offerLetter}`)}>\r\n//                         <VisibilityIcon />\r\n//                       </IconButton>\r\n//                     </Tooltip>\r\n//                     <Button\r\n//                       variant=\"contained\"\r\n//                       color=\"primary\"\r\n//                       startIcon={<CheckIcon />}\r\n//                       onClick={() => {\r\n//                         setSelectedUser(request);\r\n//                         setCredentialsDialog(true);\r\n//                       }}\r\n//                     >\r\n//                       Verify\r\n//                     </Button>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </TabPanel>\r\n\r\n//         {/* Verified Users Tab */}\r\n//         <TabPanel value={tabValue} index={1}>\r\n//           <Table>\r\n//             <TableHead>\r\n//               <TableRow>\r\n//                 <TableCell>Username</TableCell>\r\n//                 <TableCell>Email</TableCell>\r\n//                 <TableCell>Company</TableCell>\r\n//                 <TableCell>Actions</TableCell>\r\n//               </TableRow>\r\n//             </TableHead>\r\n//             <TableBody>\r\n//               {verifiedUsers.map((user) => (\r\n//                 <TableRow key={user._id}>\r\n//                   <TableCell>{user.username}</TableCell>\r\n//                   <TableCell>{user.email}</TableCell>\r\n//                   <TableCell>{user.jobDetails?.companyName}</TableCell>\r\n//                   <TableCell>\r\n//                     <Button\r\n//                       variant=\"outlined\"\r\n//                       color=\"error\"\r\n//                       startIcon={<DeleteIcon />}\r\n//                       onClick={() => handleRemoveVerification(user._id)}\r\n//                     >\r\n//                       Remove Verification\r\n//                     </Button>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </TabPanel>\r\n\r\n//         {/* Credentials Dialog */}\r\n//         <Dialog open={credentialsDialog} onClose={() => setCredentialsDialog(false)}>\r\n//           <DialogTitle>Set Job Holder Credentials</DialogTitle>\r\n//           <DialogContent>\r\n//             <TextField\r\n//               fullWidth\r\n//               label=\"Username\"\r\n//               value={credentials.username}\r\n//               onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\r\n//               margin=\"normal\"\r\n//             />\r\n//             <TextField\r\n//               fullWidth\r\n//               label=\"Password\"\r\n//               type=\"password\"\r\n//               value={credentials.password}\r\n//               onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\r\n//               margin=\"normal\"\r\n//             />\r\n//           </DialogContent>\r\n//           <DialogActions>\r\n//             <Button onClick={() => setCredentialsDialog(false)}>Cancel</Button>\r\n//             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">\r\n//               Verify & Send Credentials\r\n//             </Button>\r\n//           </DialogActions>\r\n//         </Dialog>\r\n//       </Paper>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// const TabPanel = ({ children, value, index }) => (\r\n//   <Box hidden={value !== index} sx={{ pt: 3 }}>\r\n//     {value === index && children}\r\n//   </Box>\r\n// );\r\n\r\n// export default AdminDashboard; \r\n\r\n\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AdminDashboard = () => {\r\n  const [user, setUser] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    role: 'user',\r\n    college: ''\r\n  });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post('/api/admin/create-user', user);\r\n      alert('User created and credentials sent via email');\r\n    } catch (error) {\r\n      alert('Error creating user');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" placeholder=\"Username\" onChange={(e) => setUser({ ...user, username: e.target.value })} />\r\n      <input type=\"email\" placeholder=\"Email\" onChange={(e) => setUser({ ...user, email: e.target.value })} />\r\n      <input type=\"password\" placeholder=\"Password\" onChange={(e) => setUser({ ...user, password: e.target.value })} />\r\n      <select onChange={(e) => setUser({ ...user, role: e.target.value })}>\r\n        <option value=\"user\">User</option>\r\n        <option value=\"jobholder\">Jobholder</option>\r\n      </select>\r\n      <input type=\"text\" placeholder=\"College\" onChange={(e) => setUser({ ...user, college: e.target.value })} />\r\n      <button type=\"submit\">Create User</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"mappingshC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC;IAC/BQ,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMd,KAAK,CAACe,IAAI,CAAC,wBAAwB,EAAEV,IAAI,CAAC;MAChDW,KAAK,CAAC,6CAA6C,CAAC;IACtD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdD,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACEd,OAAA;IAAMgB,QAAQ,EAAEN,YAAa;IAAAO,QAAA,gBAC3BjB,OAAA;MAAOkB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,UAAU;MAACC,QAAQ,EAAGT,CAAC,IAAKP,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAEE,QAAQ,EAAEM,CAAC,CAACU,MAAM,CAACC;MAAM,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7G1B,OAAA;MAAOkB,IAAI,EAAC,OAAO;MAACC,WAAW,EAAC,OAAO;MAACC,QAAQ,EAAGT,CAAC,IAAKP,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAEG,KAAK,EAAEK,CAAC,CAACU,MAAM,CAACC;MAAM,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxG1B,OAAA;MAAOkB,IAAI,EAAC,UAAU;MAACC,WAAW,EAAC,UAAU;MAACC,QAAQ,EAAGT,CAAC,IAAKP,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAEI,QAAQ,EAAEI,CAAC,CAACU,MAAM,CAACC;MAAM,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjH1B,OAAA;MAAQoB,QAAQ,EAAGT,CAAC,IAAKP,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAEK,IAAI,EAAEG,CAAC,CAACU,MAAM,CAACC;MAAM,CAAC,CAAE;MAAAL,QAAA,gBAClEjB,OAAA;QAAQsB,KAAK,EAAC,MAAM;QAAAL,QAAA,EAAC;MAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClC1B,OAAA;QAAQsB,KAAK,EAAC,WAAW;QAAAL,QAAA,EAAC;MAAS;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACT1B,OAAA;MAAOkB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,SAAS;MAACC,QAAQ,EAAGT,CAAC,IAAKP,OAAO,CAAC;QAAE,GAAGD,IAAI;QAAEM,OAAO,EAAEE,CAAC,CAACU,MAAM,CAACC;MAAM,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3G1B,OAAA;MAAQkB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEX,CAAC;AAACxB,EAAA,CAhCID,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AAkCpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}