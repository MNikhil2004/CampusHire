{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mnikh\\\\OneDrive\\\\Desktop\\\\jobopputunities\\\\client\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Container,\n//   Paper,\n//   Typography,\n//   Box,\n//   Tabs,\n//   Tab,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n//   Button,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   TextField,\n//   IconButton,\n//   Tooltip\n// } from '@mui/material';\n// import {\n//   Visibility as VisibilityIcon,\n//   Delete as DeleteIcon,\n//   Check as CheckIcon\n// } from '@mui/icons-material';\n// import api from '../utils/axios';\n\n// const AdminDashboard = () => {\n//   const [tabValue, setTabValue] = useState(0);\n//   const [pendingRequests, setPendingRequests] = useState([]);\n//   const [verifiedUsers, setVerifiedUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [credentialsDialog, setCredentialsDialog] = useState(false);\n//   const [credentials, setCredentials] = useState({\n//     username: '',\n//     password: ''\n//   });\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const [pendingRes, verifiedRes] = await Promise.all([\n//         api.get('/api/admin/pending-requests'),\n//         api.get('/api/admin/verified-jobholders')\n//       ]);\n//       setPendingRequests(pendingRes.data);\n//       setVerifiedUsers(verifiedRes.data);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   const handleVerify = async () => {\n//     try {\n//       await api.post(`/api/admin/verify-jobholder/${selectedUser._id}`, credentials);\n//       setCredentialsDialog(false);\n//       fetchData();\n//     } catch (error) {\n//       console.error('Error verifying user:', error);\n//     }\n//   };\n\n//   const handleRemoveVerification = async (userId) => {\n//     if (window.confirm('Are you sure you want to remove this verification?')) {\n//       try {\n//         await api.post(`/api/admin/remove-verification/${userId}`);\n//         fetchData();\n//       } catch (error) {\n//         console.error('Error removing verification:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n//       <Paper elevation={3} sx={{ p: 3 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Admin Dashboard\n//         </Typography>\n\n//         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n//           <Tab label=\"Pending Requests\" />\n//           <Tab label=\"Verified Job Holders\" />\n//         </Tabs>\n\n//         {/* Pending Requests Tab */}\n//         <TabPanel value={tabValue} index={0}>\n//           <Table>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell>Email</TableCell>\n//                 <TableCell>Company</TableCell>\n//                 <TableCell>Role</TableCell>\n//                 <TableCell>Actions</TableCell>\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {pendingRequests.map((request) => (\n//                 <TableRow key={request._id}>\n//                   <TableCell>{request.email}</TableCell>\n//                   <TableCell>{request.jobDetails?.companyName}</TableCell>\n//                   <TableCell>{request.jobDetails?.role}</TableCell>\n//                   <TableCell>\n//                     <Tooltip title=\"View Offer Letter\">\n//                       <IconButton onClick={() => window.open(`/uploads/offerLetters/${request.jobDetails.offerLetter}`)}>\n//                         <VisibilityIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Button\n//                       variant=\"contained\"\n//                       color=\"primary\"\n//                       startIcon={<CheckIcon />}\n//                       onClick={() => {\n//                         setSelectedUser(request);\n//                         setCredentialsDialog(true);\n//                       }}\n//                     >\n//                       Verify\n//                     </Button>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//         </TabPanel>\n\n//         {/* Verified Users Tab */}\n//         <TabPanel value={tabValue} index={1}>\n//           <Table>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell>Username</TableCell>\n//                 <TableCell>Email</TableCell>\n//                 <TableCell>Company</TableCell>\n//                 <TableCell>Actions</TableCell>\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {verifiedUsers.map((user) => (\n//                 <TableRow key={user._id}>\n//                   <TableCell>{user.username}</TableCell>\n//                   <TableCell>{user.email}</TableCell>\n//                   <TableCell>{user.jobDetails?.companyName}</TableCell>\n//                   <TableCell>\n//                     <Button\n//                       variant=\"outlined\"\n//                       color=\"error\"\n//                       startIcon={<DeleteIcon />}\n//                       onClick={() => handleRemoveVerification(user._id)}\n//                     >\n//                       Remove Verification\n//                     </Button>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//         </TabPanel>\n\n//         {/* Credentials Dialog */}\n//         <Dialog open={credentialsDialog} onClose={() => setCredentialsDialog(false)}>\n//           <DialogTitle>Set Job Holder Credentials</DialogTitle>\n//           <DialogContent>\n//             <TextField\n//               fullWidth\n//               label=\"Username\"\n//               value={credentials.username}\n//               onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\n//               margin=\"normal\"\n//             />\n//             <TextField\n//               fullWidth\n//               label=\"Password\"\n//               type=\"password\"\n//               value={credentials.password}\n//               onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n//               margin=\"normal\"\n//             />\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={() => setCredentialsDialog(false)}>Cancel</Button>\n//             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">\n//               Verify & Send Credentials\n//             </Button>\n//           </DialogActions>\n//         </Dialog>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// const TabPanel = ({ children, value, index }) => (\n//   <Box hidden={value !== index} sx={{ pt: 3 }}>\n//     {value === index && children}\n//   </Box>\n// );\n\n// export default AdminDashboard; \nimport React, { useState, useEffect } from 'react';\nimport { Container, Paper, Typography, Tabs, Tab, Table, TableBody, TableCell, TableHead, TableRow, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, IconButton } from '@mui/material';\nimport { Visibility as VisibilityIcon, Check as CheckIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport axios from '../utils/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  const [tabValue, setTabValue] = useState(0);\n  const [pendingRequests, setPendingRequests] = useState([]);\n  const [verifiedUsers, setVerifiedUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const [pending, verified] = await Promise.all([axios.get('/api/admin/pending-requests'), axios.get('/api/admin/verified-jobholders')]);\n      setPendingRequests(pending.data);\n      setVerifiedUsers(verified.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleVerify = async () => {\n    try {\n      await axios.post(`/api/admin/verify-jobholder/${selectedUser._id}`);\n      setOpenDialog(false);\n      fetchData();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      py: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Admin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        value: tabValue,\n        onChange: (e, newValue) => setTabValue(newValue),\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Pending Requests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Verified Job Holders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), tabValue === 0 && /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: pendingRequests.map(user => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  setSelectedUser(user);\n                  setOpenDialog(true);\n                },\n                startIcon: /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 104\n                }, this),\n                children: \"Verify\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 19\n            }, this)]\n          }, user._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: openDialog,\n        onClose: () => setOpenDialog(false),\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Verify Jobholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleVerify,\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Verify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminDashboard, \"59Yp4PD4aIEfw+Q17lUTuJ3vnto=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Container","Paper","Typography","Tabs","Tab","Table","TableBody","TableCell","TableHead","TableRow","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","IconButton","Visibility","VisibilityIcon","Check","CheckIcon","Delete","DeleteIcon","axios","jsxDEV","_jsxDEV","AdminDashboard","_s","tabValue","setTabValue","pendingRequests","setPendingRequests","verifiedUsers","setVerifiedUsers","selectedUser","setSelectedUser","openDialog","setOpenDialog","fetchData","pending","verified","Promise","all","get","data","error","console","handleVerify","post","_id","maxWidth","sx","py","children","p","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","newValue","label","map","user","email","onClick","startIcon","open","onClose","color","_c","$RefreshReg$"],"sources":["C:/Users/mnikh/OneDrive/Desktop/jobopputunities/client/src/pages/AdminDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//   Container,\r\n//   Paper,\r\n//   Typography,\r\n//   Box,\r\n//   Tabs,\r\n//   Tab,\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableRow,\r\n//   Button,\r\n//   Dialog,\r\n//   DialogTitle,\r\n//   DialogContent,\r\n//   DialogActions,\r\n//   TextField,\r\n//   IconButton,\r\n//   Tooltip\r\n// } from '@mui/material';\r\n// import {\r\n//   Visibility as VisibilityIcon,\r\n//   Delete as DeleteIcon,\r\n//   Check as CheckIcon\r\n// } from '@mui/icons-material';\r\n// import api from '../utils/axios';\r\n\r\n// const AdminDashboard = () => {\r\n//   const [tabValue, setTabValue] = useState(0);\r\n//   const [pendingRequests, setPendingRequests] = useState([]);\r\n//   const [verifiedUsers, setVerifiedUsers] = useState([]);\r\n//   const [selectedUser, setSelectedUser] = useState(null);\r\n//   const [credentialsDialog, setCredentialsDialog] = useState(false);\r\n//   const [credentials, setCredentials] = useState({\r\n//     username: '',\r\n//     password: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const [pendingRes, verifiedRes] = await Promise.all([\r\n//         api.get('/api/admin/pending-requests'),\r\n//         api.get('/api/admin/verified-jobholders')\r\n//       ]);\r\n//       setPendingRequests(pendingRes.data);\r\n//       setVerifiedUsers(verifiedRes.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleVerify = async () => {\r\n//     try {\r\n//       await api.post(`/api/admin/verify-jobholder/${selectedUser._id}`, credentials);\r\n//       setCredentialsDialog(false);\r\n//       fetchData();\r\n//     } catch (error) {\r\n//       console.error('Error verifying user:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveVerification = async (userId) => {\r\n//     if (window.confirm('Are you sure you want to remove this verification?')) {\r\n//       try {\r\n//         await api.post(`/api/admin/remove-verification/${userId}`);\r\n//         fetchData();\r\n//       } catch (error) {\r\n//         console.error('Error removing verification:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n//       <Paper elevation={3} sx={{ p: 3 }}>\r\n//         <Typography variant=\"h4\" gutterBottom>\r\n//           Admin Dashboard\r\n//         </Typography>\r\n\r\n//         <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\r\n//           <Tab label=\"Pending Requests\" />\r\n//           <Tab label=\"Verified Job Holders\" />\r\n//         </Tabs>\r\n\r\n//         {/* Pending Requests Tab */}\r\n//         <TabPanel value={tabValue} index={0}>\r\n//           <Table>\r\n//             <TableHead>\r\n//               <TableRow>\r\n//                 <TableCell>Email</TableCell>\r\n//                 <TableCell>Company</TableCell>\r\n//                 <TableCell>Role</TableCell>\r\n//                 <TableCell>Actions</TableCell>\r\n//               </TableRow>\r\n//             </TableHead>\r\n//             <TableBody>\r\n//               {pendingRequests.map((request) => (\r\n//                 <TableRow key={request._id}>\r\n//                   <TableCell>{request.email}</TableCell>\r\n//                   <TableCell>{request.jobDetails?.companyName}</TableCell>\r\n//                   <TableCell>{request.jobDetails?.role}</TableCell>\r\n//                   <TableCell>\r\n//                     <Tooltip title=\"View Offer Letter\">\r\n//                       <IconButton onClick={() => window.open(`/uploads/offerLetters/${request.jobDetails.offerLetter}`)}>\r\n//                         <VisibilityIcon />\r\n//                       </IconButton>\r\n//                     </Tooltip>\r\n//                     <Button\r\n//                       variant=\"contained\"\r\n//                       color=\"primary\"\r\n//                       startIcon={<CheckIcon />}\r\n//                       onClick={() => {\r\n//                         setSelectedUser(request);\r\n//                         setCredentialsDialog(true);\r\n//                       }}\r\n//                     >\r\n//                       Verify\r\n//                     </Button>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </TabPanel>\r\n\r\n//         {/* Verified Users Tab */}\r\n//         <TabPanel value={tabValue} index={1}>\r\n//           <Table>\r\n//             <TableHead>\r\n//               <TableRow>\r\n//                 <TableCell>Username</TableCell>\r\n//                 <TableCell>Email</TableCell>\r\n//                 <TableCell>Company</TableCell>\r\n//                 <TableCell>Actions</TableCell>\r\n//               </TableRow>\r\n//             </TableHead>\r\n//             <TableBody>\r\n//               {verifiedUsers.map((user) => (\r\n//                 <TableRow key={user._id}>\r\n//                   <TableCell>{user.username}</TableCell>\r\n//                   <TableCell>{user.email}</TableCell>\r\n//                   <TableCell>{user.jobDetails?.companyName}</TableCell>\r\n//                   <TableCell>\r\n//                     <Button\r\n//                       variant=\"outlined\"\r\n//                       color=\"error\"\r\n//                       startIcon={<DeleteIcon />}\r\n//                       onClick={() => handleRemoveVerification(user._id)}\r\n//                     >\r\n//                       Remove Verification\r\n//                     </Button>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </TabPanel>\r\n\r\n//         {/* Credentials Dialog */}\r\n//         <Dialog open={credentialsDialog} onClose={() => setCredentialsDialog(false)}>\r\n//           <DialogTitle>Set Job Holder Credentials</DialogTitle>\r\n//           <DialogContent>\r\n//             <TextField\r\n//               fullWidth\r\n//               label=\"Username\"\r\n//               value={credentials.username}\r\n//               onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\r\n//               margin=\"normal\"\r\n//             />\r\n//             <TextField\r\n//               fullWidth\r\n//               label=\"Password\"\r\n//               type=\"password\"\r\n//               value={credentials.password}\r\n//               onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\r\n//               margin=\"normal\"\r\n//             />\r\n//           </DialogContent>\r\n//           <DialogActions>\r\n//             <Button onClick={() => setCredentialsDialog(false)}>Cancel</Button>\r\n//             <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">\r\n//               Verify & Send Credentials\r\n//             </Button>\r\n//           </DialogActions>\r\n//         </Dialog>\r\n//       </Paper>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// const TabPanel = ({ children, value, index }) => (\r\n//   <Box hidden={value !== index} sx={{ pt: 3 }}>\r\n//     {value === index && children}\r\n//   </Box>\r\n// );\r\n\r\n// export default AdminDashboard; \r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container, Paper, Typography, Tabs, Tab, Table, TableBody, TableCell,\r\n  TableHead, TableRow, Button, Dialog, DialogTitle, DialogContent,\r\n  DialogActions, TextField, IconButton\r\n} from '@mui/material';\r\nimport { Visibility as VisibilityIcon, Check as CheckIcon, Delete as DeleteIcon } from '@mui/icons-material';\r\nimport axios from '../utils/axios';\r\n\r\nconst AdminDashboard = () => {\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [pendingRequests, setPendingRequests] = useState([]);\r\n  const [verifiedUsers, setVerifiedUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const [pending, verified] = await Promise.all([\r\n        axios.get('/api/admin/pending-requests'),\r\n        axios.get('/api/admin/verified-jobholders')\r\n      ]);\r\n      setPendingRequests(pending.data);\r\n      setVerifiedUsers(verified.data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleVerify = async () => {\r\n    try {\r\n      await axios.post(`/api/admin/verify-jobholder/${selectedUser._id}`);\r\n      setOpenDialog(false);\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" sx={{ py: 4 }}>\r\n      <Paper sx={{ p: 3 }}>\r\n        <Typography variant=\"h4\" gutterBottom>Admin Dashboard</Typography>\r\n        <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\r\n          <Tab label=\"Pending Requests\" />\r\n          <Tab label=\"Verified Job Holders\" />\r\n        </Tabs>\r\n\r\n        {tabValue === 0 && (\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow><TableCell>Email</TableCell><TableCell>Actions</TableCell></TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {pendingRequests.map((user) => (\r\n                <TableRow key={user._id}>\r\n                  <TableCell>{user.email}</TableCell>\r\n                  <TableCell>\r\n                    <Button onClick={() => { setSelectedUser(user); setOpenDialog(true); }} startIcon={<CheckIcon />}>Verify</Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        )}\r\n\r\n        <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n          <DialogTitle>Verify Jobholder</DialogTitle>\r\n          <DialogActions>\r\n            <Button onClick={handleVerify} variant=\"contained\" color=\"primary\">Verify</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}